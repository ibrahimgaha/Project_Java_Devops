pipeline {
    agent any

    tools {
        maven "mvn" // Maven tool configured in Jenkins
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Cloning repository...'
                git branch: 'main', url: 'https://github.com/ibrahimgaha/Project_Java_Devops'
            }
        }

        stage('Setup Environment') {
            steps {
                echo 'Setting up Maven environment...'
                bat 'mvn -version' // Use sh for Linux agents
            }
        }
        
        stage('Compile') {
            steps {
                echo 'Compiling the application...'
                bat 'mvn clean compile -DskipTests'
            }
        }
        
        stage('Package') { 
            steps {
                echo 'Packaging the application...'
                bat 'mvn package -DskipTests'
            }
        }
        
        stage('Print Working Directory') {
            steps {
                script {
                    def workingDir = pwd()
                    echo "Current directory: ${workingDir}"
                }
            }
        }
        
        stage('Run Docker Compose') {
            steps {
                dir("app") {
                    bat "docker-compose up -d" // Adjust path if needed
                }
            }
        }
        
        stage('Deploy - Staging') {
            steps {
                echo 'Deploying to Kubernetes (Staging)...'
                // Uncomment below if deploying
                // script {
                //     dir("k8s") {
                //         bat 'kubectl apply -f deployment.yaml'
                //     }
                // }
            }
        }
        
        stage('Deploy - Production') {
            steps {
                echo 'Deploying to Kubernetes (Production)...'
                // Uncomment below if deploying
                // script {
                //     dir("k8s") {
                //         bat 'kubectl apply -f deployment.yaml'
                //     }
                // }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline finished. Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Build completed successfully!'
        }
        failure {
            echo 'Build failed. Please check the logs.'
        }
    }
}
